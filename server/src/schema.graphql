scalar DATE

type Query {
    me: User
}

type Mutation {
    signup(email: String!, password: String!, name: String): AuthPayload
    login(email: String!, password: String!): AuthPayload
    createChat(name: String, img: String, anonymous: Boolean, participants: [ID]!): ChatPayload
}

interface Payload {
    success: Boolean!
    error: String
}

interface DataItem {
    id: ID!
    createdAt: DATE!
    updatedAt: DATE!
}

type AuthPayload implements Payload {
    success: Boolean!
    error: String
    data: AuthData
}

type AuthData {
    token: String
    user: User
}

type ChatPayload implements Payload {
    success: Boolean!
    error: String
    data: Chat
}

type Chat implements DataItem {
    id: ID!
    name: String
    img: String
    participants: [User]!
    anonymous: Boolean!
    createdAt: DATE!
    updatedAt: DATE!
}

type User implements DataItem {
    id: ID!
    name: String
    email: String!
    password: String!
    chats: [Chat]!
    createdAt: DATE!
    updatedAt: DATE!
}
